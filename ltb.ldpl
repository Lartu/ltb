# +---------------------------------+
# |     ltb - LDPL Telegram Bot     |
# +---------------------------------+
# | by Dami√°n Garro                 |
# | https://github.com/dgarroDC/ltb |
# +---------------------------------+

EXTENSION "extensions/ltb_curl.cpp"
FLAG "-lcurl"
EXTENSION "extensions/ltb_json.cpp"

DATA:

# Base Telegram Bot API request URL (https://api.telegram.org/bot<token>/)
ltb.baseUrl is text

# ltb.curl methods input and output
ltb.curl.in.url is external text
ltb.curl.in.argNames is external text list
ltb.curl.in.argValues is external text list
ltb.curl.out.response is external text

# ltb.json methods input and output
ltb.json.in.json is external text
ltb.json.in.value is external text
ltb.json.out.text is external text
ltb.json.out.textlist is external text list

# error code and text
ltb.ec is number
ltb.et is text
PROCEDURE:

# Initializes the bot given its token and process the updates
sub ltb.botInit
parameters:
    token is text
local data:
    nextUpdateId is number
    auxText is text
    auxtTextList is text list
procedure:
    in ltb.baseUrl join "https://api.telegram.org/bot" token "/"

    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    call ltb.request with "getMe" auxText

    while 1 is equal to 1 do # Check updates forever
        clear ltb.curl.in.argNames
        clear ltb.curl.in.argValues
        push "offset" to ltb.curl.in.argNames
        store nextUpdateId in auxText # Convert to text
        push auxText to ltb.curl.in.argValues
        push "timeout" to ltb.curl.in.argNames
        push "60" to ltb.curl.in.argValues
        call ltb.request with "getUpdates" ltb.json.in.json

        call external ltb.json.getTextList
        copy ltb.json.out.textlist to auxtTextList
        for each auxText in auxtTextList do
            store auxText in ltb.json.in.json
            store "update_id" in ltb.json.in.value
            call external ltb.json.getValue
            store ltb.json.out.text in nextUpdateId
            incr nextUpdateId

            store "message" in ltb.json.in.value
            call external ltb.json.getValue
            if ltb.json.out.text is not equal to "" then
                call ltb.handleUpdateMessage with ltb.json.out.text
            end if
        repeat
    repeat
end sub
create statement "TG BOT INIT WITH TOKEN $" executing ltb.botInit

# Sends a message to a chat
sub ltb.sendMessage
parameters:
    messageText is text
    chatId is number
local data:
    auxText is text
procedure:
    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    push "chat_id" to ltb.curl.in.argNames
    store chatId in auxText # Convert to text
    push auxText to ltb.curl.in.argValues
    push "action" to ltb.curl.in.argNames
    push "typing" to ltb.curl.in.argValues
    call ltb.request with "sendChatAction" auxText

    delete last element of ltb.curl.in.argNames
    delete last element of ltb.curl.in.argValues
    push "text" to ltb.curl.in.argNames
    push messageText to ltb.curl.in.argValues
    call ltb.request with "sendMessage" auxText
end sub
create statement "TG BOT SEND MESSAGE $ TO $" executing ltb.sendMessage

# Makes a Telegram Bot API request to:
# https://api.telegram.org/bot<token>/<methodName>
# and returns its response result
# ltb.curl arguments must be set before calling this
sub ltb.request
parameters:
    methodName is text
    result is text
procedure:
    in ltb.curl.in.url join ltb.baseUrl methodName
    call external ltb.curl.request
    store ltb.curl.out.response in ltb.json.in.json
    call external ltb.json.getResult
    store ltb.json.out.text in result
end sub

# Handles message json from an update
# Calls the correct user sub-procedures
sub ltb.handleUpdateMessage
parameters:
    messageJsonParam is text
local data:
    messageJson is text
    messageId is number
    chatId is number
    userData is text map
    messageText is text
    userDataKeys is text list
    key is text
procedure:
    store messageJsonParam in messageJson

    store messageJson in ltb.json.in.json
    store "message_id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in messageId

    store "chat" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in ltb.json.in.json
    store "id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in chatId

    push "id" to userDataKeys
    push "first_name" to userDataKeys
    push "second_name" to userDataKeys
    push "username" to userDataKeys

    store messageJson in ltb.json.in.json
    store "text" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is equal to "" then
        store "caption" in ltb.json.in.value
        call external ltb.json.getValue
    end if
    if ltb.json.out.text is not equal to "" then
        # Text message
        store ltb.json.out.text in messageText

        store "from" in ltb.json.in.value
        call external ltb.json.getValue
        if ltb.json.out.text is not equal to "" then
            store ltb.json.out.text in ltb.json.in.json
            for each key in userDataKeys do
                store key in ltb.json.in.value
                call external ltb.json.getValue
                store ltb.json.out.text in userData:key
            repeat
        end if

        call ltb.onMessage with messageId chatId userData messageText
    end if

    store messageJson in ltb.json.in.json
    store "new_chat_members" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is not equal to "" then
        # Users joined
        store ltb.json.out.text in ltb.json.in.json
        call external ltb.json.getTextList
        for each ltb.json.in.json in ltb.json.out.textlist do
            for each key in userDataKeys do
                store key in ltb.json.in.value
                call external ltb.json.getValue
                store ltb.json.out.text in userData:key
            repeat
        repeat

        call ltb.onJoin with messageId chatId userData
    end if


    store messageJson in ltb.json.in.json
    store "left_chat_member" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is not equal to "" then
        # User left
        store ltb.json.out.text in ltb.json.in.json
        for each key in userDataKeys do
            store key in ltb.json.in.value
            call external ltb.json.getValue
            store ltb.json.out.text in userData:key
        repeat

        call ltb.onDeparture with messageId chatId userData
    end if
end sub

external sub seterrorcode
    store ltb.ec in ERRORCODE
    store ltb.et in ERRORTEXT
end sub
