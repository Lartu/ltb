# +---------------------------------+
# |     ltb - LDPL Telegram Bot     |
# +---------------------------------+
# | by DamiÃ¡n Garro                 |
# | https://github.com/dgarroDC/ltb |
# +---------------------------------+

EXTENSION "extensions/ltb_curl.cpp"
FLAG "-lcurl"
EXTENSION "extensions/ltb_json.cpp"

DATA:

# Public to the user
ltb.send.options is text map

# Base Telegram Bot API request URL (https://api.telegram.org/bot<token>/)
ltb.baseUrl is text

# ltb.curl methods input and output
ltb.curl.in.url is external text
ltb.curl.in.argNames is external text list
ltb.curl.in.argValues is external text list
ltb.curl.out.response is external text

# ltb.json methods input and output
ltb.json.in.json is external text
ltb.json.in.value is external text
ltb.json.out.text is external text
ltb.json.out.textlist is external text list

# error code and text
ltb.ec is external number
ltb.et is external text

PROCEDURE:

# +-----------------------------------------+
# | Bot initialization and updates handling |
# +-----------------------------------------+

# Initializes the bot given its token and process the updates
sub ltb.botInit
parameters:
    token is text
local data:
    nextUpdateId is number
    auxText is text
    auxtTextList is text list
procedure:
    in ltb.baseUrl join "https://api.telegram.org/bot" token "/"

    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    call ltb.request with "getMe" ltb.json.in.json
    if errorcode is not equal to 0 then
        return
    end if
    store "username" in ltb.json.in.value
    call external ltb.json.getValue
    display "LTB: @" ltb.json.out.text " successfully initialized! ðŸŽ‰" crlf

    while 1 is equal to 1 do # Poll updates forever
        clear ltb.curl.in.argNames
        clear ltb.curl.in.argValues
        push "offset" to ltb.curl.in.argNames
        store nextUpdateId in auxText # Convert to text
        push auxText to ltb.curl.in.argValues
        push "timeout" to ltb.curl.in.argNames
        push "60" to ltb.curl.in.argValues
        call ltb.request with "getUpdates" ltb.json.in.json
        if errorcode is not equal to 0 then
            continue
        end if

        call external ltb.json.getTextList
        copy ltb.json.out.textlist to auxtTextList
        for each auxText in auxtTextList do
            store auxText in ltb.json.in.json
            store "update_id" in ltb.json.in.value
            call external ltb.json.getValue
            store ltb.json.out.text in nextUpdateId
            in nextUpdateId solve nextUpdateId + 1

            store "message" in ltb.json.in.value
            call external ltb.json.getValue
            if ltb.json.out.text is not equal to "" then
                call ltb.handleUpdateMessage with ltb.json.out.text
                continue
            end if

            store "callback_query" in ltb.json.in.value
            call external ltb.json.getValue
            if ltb.json.out.text is not equal to "" then
                call ltb.handleUpdateCallbackQuery with ltb.json.out.text
            end if
        repeat
    repeat
end sub
create statement "TG BOT INIT WITH TOKEN $" executing ltb.botInit

# Handles message JSON from an update
# Calls the correct user sub-procedures
sub ltb.handleUpdateMessage
parameters:
    messageJsonParam is text
local data:
    messageJson is text
    messageId is number
    chatId is number
    userData is text map
    messageText is text
    userDataKeys is text list
    key is text
procedure:
    store messageJsonParam in messageJson

    store messageJson in ltb.json.in.json
    store "message_id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in messageId

    store "chat" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in ltb.json.in.json
    store "id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in chatId

    push "id" to userDataKeys
    push "first_name" to userDataKeys
    push "second_name" to userDataKeys
    push "username" to userDataKeys

    store messageJson in ltb.json.in.json
    store "text" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is equal to "" then
        store "caption" in ltb.json.in.value
        call external ltb.json.getValue
    end if
    if ltb.json.out.text is not equal to "" then
        # Text message
        store ltb.json.out.text in messageText

        store "from" in ltb.json.in.value
        call external ltb.json.getValue
        if ltb.json.out.text is not equal to "" then
            store ltb.json.out.text in ltb.json.in.json
            for each key in userDataKeys do
                store key in ltb.json.in.value
                call external ltb.json.getValue
                store ltb.json.out.text in userData:key
            repeat
        end if

        call ltb.onMessage with messageId chatId userData messageText
    end if

    store messageJson in ltb.json.in.json
    store "new_chat_members" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is not equal to "" then
        # Users joined
        store ltb.json.out.text in ltb.json.in.json
        call external ltb.json.getTextList
        for each ltb.json.in.json in ltb.json.out.textlist do
            for each key in userDataKeys do
                store key in ltb.json.in.value
                call external ltb.json.getValue
                store ltb.json.out.text in userData:key
            repeat
        repeat

        call ltb.onJoin with messageId chatId userData
    end if

    store messageJson in ltb.json.in.json
    store "left_chat_member" in ltb.json.in.value
    call external ltb.json.getValue
    if ltb.json.out.text is not equal to "" then
        # User left
        store ltb.json.out.text in ltb.json.in.json
        for each key in userDataKeys do
            store key in ltb.json.in.value
            call external ltb.json.getValue
            store ltb.json.out.text in userData:key
        repeat

        call ltb.onDeparture with messageId chatId userData
    end if
end sub

# Handles callback query JSON from an update
# Calls the correct user sub-procedures
sub ltb.handleUpdateCallbackQuery
parameters:
    callbackQueryJsonParam is text
local data:
    callbackQueryJson is text
    chatId is number
    userData is text map
    callbackData is text
    userDataKeys is text list
    callbackId is text
    key is text
    auxText is text
    answerText is text
    answerAlert is number
procedure:
    store callbackQueryJsonParam in callbackQueryJson

    store callbackQueryJson in ltb.json.in.json
    store "message" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in ltb.json.in.json
    store "chat" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in ltb.json.in.json
    store "id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in chatId

    store callbackQueryJson in ltb.json.in.json
    store "from" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in ltb.json.in.json
    push "id" to userDataKeys
    push "first_name" to userDataKeys
    push "second_name" to userDataKeys
    push "username" to userDataKeys
    for each key in userDataKeys do
        store key in ltb.json.in.value
        call external ltb.json.getValue
        store ltb.json.out.text in userData:key
    repeat

    store callbackQueryJson in ltb.json.in.json
    store "data" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in callbackData

    call ltb.onCallbackQuery with chatId userData callbackData answerText answerAlert

    # Answer the query
    store callbackQueryJson in ltb.json.in.json
    store "id" in ltb.json.in.value
    call external ltb.json.getValue
    store ltb.json.out.text in callbackId
    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    push "callback_query_id" to ltb.curl.in.argNames
    push ltb.json.out.text to ltb.curl.in.argValues
    if answerText is not equal to "" then
        push "text" to ltb.curl.in.argNames
        push answerText to ltb.curl.in.argValues
        if answerAlert is equal to 1 then
            push "show_alert" to ltb.curl.in.argNames
            push "true" to ltb.curl.in.argValues
        end if
    end if
    call ltb.request with "answerCallbackQuery" auxText
end sub

# +------------------+
# | Messages sending |
# +------------------+

# Sends a message to a chat
sub ltb.sendMessage
parameters:
    messageText is text
    chatId is number
local data:
    auxText is text
procedure:
    call ltb.sendMessageWithInlineKeyboard with messageText chatId ""
end sub
create statement "TG BOT SEND MESSAGE $ TO $" executing ltb.sendMessage

# Sends a message with inline keyboad to a chat
sub ltb.sendMessageWithInlineKeyboard
parameters:
    messageText is text
    chatId is number
    inlineKeyboard is text
local data:
    auxText is text
procedure:
    clear ltb.curl.in.argNames
    clear ltb.curl.in.argValues
    push "chat_id" to ltb.curl.in.argNames
    store chatId in auxText # Convert to text
    push auxText to ltb.curl.in.argValues
    push "text" to ltb.curl.in.argNames
    push messageText to ltb.curl.in.argValues
    if inlineKeyboard is not equal to "" then
        push "reply_markup" to ltb.curl.in.argNames
        push inlineKeyboard to ltb.curl.in.argValues
    end if
    if ltb.send.options:"format" is not equal to "" then
        push "parse_mode" to ltb.curl.in.argNames
        push ltb.send.options:"format" to ltb.curl.in.argValues
    end if
    if ltb.send.options:"disable_preview" is not equal to "" then
        push "disable_web_page_preview" to ltb.curl.in.argNames
        push "true" to ltb.curl.in.argValues
    end if
    call ltb.request with "sendMessage" auxText
    clear ltb.send.options
end sub
create statement "TG BOT SEND MESSAGE $ TO $ WITH INLINE KEYBOARD $" executing ltb.sendMessageWithInlineKeyboard

# +------------------------------+
# | Inline keyboard construction |
# +------------------------------+

# Creates an empty inline keyboard
sub ltb.createInlineKeyboard
parameters:
    inlineKeyboard is text
procedure:
    store "{\"inline_keyboard\":[[]]}" in inlineKeyboard
end sub
create statement "TG BOT CREATE INLINE KEYBOARD IN $" executing ltb.createInlineKeyboard

# Adds empty row to inline keyboard
sub ltb.addRow
parameters:
    inlineKeyboard is text
procedure:
    replace "]]}" from inlineKeyboard with "],[]]}" in inlineKeyboard
end sub
create statement "TG BOT ADD ROW TO INLINE KEYBOARD $" executing ltb.addRow

# Adds button with url to inline keyboard
sub ltb.addUrlButton
parameters:
    text is text
    url is text
    inlineKeyboard is text
procedure:
    call ltb.addButton with text url "url" inlineKeyboard
end sub
create statement "TG BOT ADD BUTTON WITH TEXT $ AND URL $ TO INLINE KEYBOARD $" executing ltb.addUrlButton

# Adds button with callback data to inline keyboard
sub ltb.addCallbackDataButton
parameters:
    text is text
    callbackData is text
    inlineKeyboard is text
procedure:
    call ltb.addButton with text callbackData "callback_data" inlineKeyboard
end sub
create statement "TG BOT ADD BUTTON WITH TEXT $ AND CALLBACK DATA $ TO INLINE KEYBOARD $" executing ltb.addCallbackDataButton

# Adds button with url or callback data to inline keyboard
sub ltb.addButton
parameters:
    text is text
    data is text
    dataType is text # "url" or "callback_data"
    inlineKeyboard is text
local data:
    length is number
    i is number
    button is text
procedure:
    in button join "{\"text\":\"" text "\",\"" dataType "\":\"" data "\"}]]}"
    get length of inlineKeyboard in length
    in length solve length - 4
    get index of "[]]}" from inlineKeyboard in i
    if i is not equal to length then
        # Last row is not empty
        join "," and button in button
    end if
    replace "]]}" from inlineKeyboard with button in inlineKeyboard
end sub

# +-------------------------------+
# | General helper SUB-PROCEDUREs |
# +-------------------------------+

# Makes a Telegram Bot API request to:
# https://api.telegram.org/bot<token>/<methodName>
# and returns its response result
# ltb.curl arguments must be set before calling this
sub ltb.request
parameters:
    methodName is text
    result is text
procedure:
    in ltb.curl.in.url join ltb.baseUrl methodName
    call external ltb.curl.request
    if errorcode is equal to 0 then
        store ltb.curl.out.response in ltb.json.in.json
        call external ltb.json.getResult
        store ltb.json.out.text in result
    end if
end sub

external sub seterrorcode
    store ltb.ec in ERRORCODE
    store ltb.et in ERRORTEXT
end sub
